function [lamx,varx,dft] = freq2AR2(fmax,df,varMa,varargin)

% function [lamx,varx,dft] = GetAR2Param(fmax,df,varMa,varargin)
%
% Performs a linesearch to find the parameters of an
% AR(2) process which has a specrum with centre
% frequency fmax and bandwidth df, as well as marginal
% variance varMa.
%
% INPUTS
% fmax = centre frequency
% df = bandwidth
% varMa = marginal variance
% OPTIONAL: verbose output (= 1 => display information)
%
% OUTPUTS
% lamx = AR(2) dynamical parameter [2,1]
% varx = AR(2) innovations noise
% dft = true bandwidth of the fit

cosom = cos(2*pi*fmax);

% Values of lam2 to check over
lam2 = linspace(-1,0,10000);

% Values of lam1 that correspond to the centre frequency
lam1 = 4*lam2./(lam2-1)*cosom;

c1 = -8-16*cosom^2;
c2 = -4./lam2.*(1+16*lam2.^2*cosom^2./(lam2-1).^2+lam2.^2);

cosfd1 = cosom+1/4*sqrt(c1+c2);
cosfd2 = cosom-1/4*sqrt(c1+c2);

% corresponding bandwidths
dfs = abs(acos(cosfd1)-acos(cosfd2))/(2*pi);

%vars = (1-lam2-lam1.^2+lam2.^3-lam1.^2.*lam2)./(1-lam2);
%dfs(vars<0)=NaN;

% closest bandwidth to the desired bandwidth
[val,loc] = min(abs(dfs-df));

%subplot(1,2,1)
%hold on
%plot(lam2,dfs)
%plot(lam2(loc),dfs(loc),'.r','markersize',9)

% organising output
dft = dfs(loc);
l2 = lam2(loc);
l1 = 4*l2/(l2-1)*cosom;
varx = varMa*(1-l2-l1^2-l2^2+l2^3-l1^2*l2)/(1-l2);
lamx = [l1;l2];

if isempty(varargin)
  verbose=1;
else
  verbose = varargin{1};
end
%keyboard
if verbose ==1
  str = ['Target bandwidth ', num2str(df),' True bandwidth ',num2str(dft)];
  disp(str);
end